{
  "version": 3,
  "sources": ["../src/services/create-element/create-element.ts", "../src/services/add-trailer/add-trailer.ts", "../src/services/insert-link-to-css-if-not-exists/insert-link-to-css-if-not-exists.ts", "../src/services/is-details/is-details.ts", "../src/services/is-series/is-series.ts", "../src/services/add-missing-key-notice/add-missing-key-notice.tsx", "../src/services/tmdb/tmdb.ts", "../src/index.ts"],
  "sourcesContent": ["const classNamePrefix = 'plex-enhancements-'\n\nexport const crEl = <T extends HTMLElement = HTMLElement>(\n  tagName: string,\n  className?: string | null,\n  text?: string | null,\n  onClick?: () => void\n) => {\n  const element = document.createElement(tagName)\n\n  if (className) {\n    element.className = `${classNamePrefix}${className}`\n  }\n\n  if (text) {\n    element.textContent = text\n\n    if (tagName === 'a') {\n      element.title = text\n    }\n  }\n\n  if (onClick) {\n    element.addEventListener('click', onClick)\n  }\n\n  return element as T\n}\n\nexport const crA = (className: string, text: string, href: string) => {\n  const link = crEl<HTMLAnchorElement>('a', className, text)\n\n  link.href = href\n  link.target = '_blank'\n\n  return link\n}\n\nexport const $ = <T extends HTMLElement = HTMLElement>(selector: string) =>\n  document.querySelector(selector) as T\n\nexport const $testId = (testId: string) => $(`[data-testid=\"${testId}\"]`)\n", "import { crEl } from '../create-element/create-element'\n\nconst rootUrl = 'https://www.themoviedb.org/video/play?key='\n\nexport const addTrailer = (\n  buttonTitle = '',\n  trailerKey: string,\n  posterContainer: Element\n) => {\n  const { innerWidth: width, innerHeight } = window\n  const height = innerHeight - 250\n  const container = crEl('div', 'trailer-iframe-container')\n\n  const playButton = crEl('button', 'play-trailer-button', buttonTitle, () => {\n    const iframe = crEl<HTMLIFrameElement>('iframe', 'trailer-iframe')\n    iframe.src = `${rootUrl}${trailerKey}&width=${width}&height=${height}`\n\n    container.appendChild(iframe)\n    document.body.appendChild(container)\n\n    playButton.style.display = 'none'\n    iframe.style.display = 'block'\n    closeButton.style.display = 'block'\n  })\n\n  const closeButton = crEl('button', 'close-trailer-button', 'Close', () => {\n    container?.parentElement?.removeChild(container)\n    closeButton.style.display = 'none'\n    playButton.style.display = 'block'\n  })\n\n  posterContainer?.appendChild(playButton)\n  document.body.appendChild(closeButton)\n}\n", "import { $, crEl } from '../create-element/create-element'\n\nexport const insertLinkToCssIfNotExists = () => {\n  if ($('.plex-enhancements-styles')) {\n    return\n  }\n\n  const link = crEl<HTMLLinkElement>('link', 'styles')\n  link.rel = 'stylesheet'\n  link.href = browser.runtime.getURL('static/plex-enhancements.css')\n\n  document.head.appendChild(link)\n}\n", "export const isDetails = () =>\n  ['metadata-title', 'metadata-line1', 'metadata-poster'].every(\n    testId => !!document.querySelector(`[data-testid=\"${testId}\"]`)\n  )\n", "export const isSeries = () =>\n  [\n    '[data-testid=\"metadata-title\"]',\n    '[data-testid=\"metadata-line1\"]',\n    '[data-testid=\"metadata-poster\"]',\n    '[data-testid=\"hubTitle\"][title=\"Seasons\"]'\n  ].every(testId => !!document.querySelector(testId))\n", "import { $, crEl } from '../create-element/create-element'\n\nexport const addMissingKeyNotice = () => {\n  if ($('.plex-enhancements-missing-key-notice')) {\n    return\n  }\n\n  const notice = crEl('div', 'missing-key-notice')\n  const buttonContainer = crEl('div')\n\n  const text = crEl(\n    'p',\n    null,\n    'Missing TMDB API key. Please add it in the extension options.'\n  )\n\n  const dismissButton = crEl(\n    'button',\n    'missing-key-notice-dismiss-button',\n    'Dismiss',\n    () => notice.parentElement?.removeChild(notice)\n  )\n\n  const optionsButton = crEl(\n    'button',\n    'missing-key-notice-options-button',\n    'Show Options',\n    () => browser.runtime.sendMessage({ action: 'openOptionsPage' })\n  )\n\n  buttonContainer.appendChild(dismissButton)\n  buttonContainer.appendChild(optionsButton)\n  notice.appendChild(text)\n  notice.appendChild(buttonContainer)\n  document.body.appendChild(notice)\n}\n", "import { addMissingKeyNotice } from '../add-missing-key-notice/add-missing-key-notice'\n\nexport const tmdb = {\n  async getOptions() {\n    const { tmdbReadAccessToken } = await browser.storage.sync.get(\n      'tmdbReadAccessToken'\n    )\n\n    if (!tmdbReadAccessToken) {\n      addMissingKeyNotice()\n\n      return null\n    }\n\n    return {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization: `Bearer ${tmdbReadAccessToken}`\n      }\n    }\n  },\n\n  async request(url: string) {\n    const options = await tmdb.getOptions()\n\n    if (!options) {\n      return null\n    }\n\n    const result = await fetch(url, options)\n\n    return result.json() as Record<string, any>\n  },\n\n  async getCache(cacheKey: string) {\n    const data = await browser.storage.local.get(cacheKey)\n\n    return data[cacheKey]\n  },\n\n  async setCache(cacheKey: string, data: any) {\n    return browser.storage.local.set({ [cacheKey]: data })\n  },\n\n  async getVideos(type: 'tv' | 'movie', itemId: string) {\n    const cacheKey = `${type}-${itemId}-videos`\n    const cache = await tmdb.getCache(cacheKey)\n\n    if (cache) {\n      return cache\n    }\n\n    const url = `https://api.themoviedb.org/3/${type}/${itemId}/videos`\n    const data = await tmdb.request(url)\n\n    if (data !== null) {\n      tmdb.setCache(cacheKey, data)\n    }\n\n    return data\n  },\n\n  async getExternalIds(type: 'tv' | 'movie', itemId: string) {\n    const cacheKey = `${type}-${itemId}-externalIds`\n    const cache = await tmdb.getCache(cacheKey)\n\n    if (cache) {\n      return cache\n    }\n\n    const url = `https://api.themoviedb.org/3/${type}/${itemId}/external_ids`\n    const data = await tmdb.request(url)\n\n    if (data !== null) {\n      tmdb.setCache(cacheKey, data)\n    }\n\n    return data\n  },\n\n  async searchByTitleAndYear(\n    type: 'tv' | 'movie',\n    title: string,\n    year: string\n  ) {\n    const safeTitle = title.replace(/[^a-zA-Z0-9 ]/g, '').replace(/\\s/g, '-')\n    const cacheKey = `${type}-${safeTitle}-${year}-itemId`\n    const cache = await tmdb.getCache(cacheKey)\n\n    if (cache) {\n      return cache\n    }\n\n    const encodedTitle = encodeURIComponent(title)\n    const url = `https://api.themoviedb.org/3/search/${type}?query=${encodedTitle}&year=${year}`\n    const data = await tmdb.request(url)\n\n    if (data !== null) {\n      const id = data.results?.[0]?.id\n\n      if (id) {\n        await tmdb.setCache(cacheKey, id)\n      }\n\n      return id\n    }\n\n    return null\n  }\n}\n", "import { addTrailer } from './services/add-trailer/add-trailer'\nimport { $, $testId, crA } from './services/create-element/create-element'\nimport { insertLinkToCssIfNotExists } from './services/insert-link-to-css-if-not-exists/insert-link-to-css-if-not-exists'\nimport { isDetails } from './services/is-details/is-details'\nimport { isSeries } from './services/is-series/is-series'\nimport { tmdb } from './services/tmdb/tmdb'\n\nconst state = {\n  dataAddedToPage: false\n}\n\nconst addDataToPage = async () => {\n  const type = isSeries() ? 'tv' : 'movie'\n\n  const ratingsContainer = $testId('metadata-ratings')?.parentElement\n  const posterElement = $testId('metadata-poster')\n  const titleElement = $testId('metadata-title')\n  const yearElement = $testId('metadata-line1')\n\n  const year = yearElement?.textContent?.split(/\\s/)[0] ?? ''\n  const title = titleElement?.textContent ?? ''\n\n  const itemId = await tmdb.searchByTitleAndYear(type, title, year)\n\n  if (!itemId) {\n    return\n  }\n\n  if (type === 'movie') {\n    ratingsContainer?.appendChild(\n      crA(\n        'letterboxd-link',\n        'View on Letterboxd',\n        `https://letterboxd.com/tmdb/${itemId}/`\n      )\n    )\n  }\n\n  ratingsContainer?.appendChild(\n    crA(\n      'tmdb-link',\n      'View on TMDB',\n      `https://www.themoviedb.org/${type}/${itemId}/`\n    )\n  )\n\n  const { imdb_id } = await tmdb.getExternalIds(type, itemId)\n\n  if (imdb_id) {\n    ratingsContainer?.appendChild(\n      crA('imdb-link', 'View on IMDB', `https://www.imdb.com/title/${imdb_id}`)\n    )\n  }\n\n  const videos = await tmdb.getVideos(type, itemId)\n\n  const trailer = videos.results.find(video => video.type === 'Trailer')\n  const teaser = videos.results.find(video => video.type === 'Teaser')\n\n  if (posterElement) {\n    if (trailer) {\n      addTrailer('Play trailer', trailer.key, posterElement)\n    } else if (teaser) {\n      addTrailer('Play teaser', teaser.key, posterElement)\n    }\n  }\n\n  return\n}\n\nconst pageMutationsObserver = new MutationObserver(async mutations => {\n  if (location.href.includes('/details')) {\n    if (isDetails() && !state.dataAddedToPage) {\n      addDataToPage()\n      state.dataAddedToPage = true\n    }\n  }\n})\n\npageMutationsObserver.observe(document.body, {\n  childList: true,\n  subtree: true\n})\n\nwindow.addEventListener('hashchange', () => {\n  state.dataAddedToPage = false\n\n  const iframeContainer = $('.plex-enhancements-trailer-iframe-container')\n  iframeContainer?.parentElement?.removeChild(iframeContainer)\n\n  const closeButton = $('.plex-enhancements-close-trailer-button')\n  closeButton?.parentElement?.removeChild(closeButton)\n})\n\ndocument.addEventListener('keydown', (event: KeyboardEvent) => {\n  if (event.key === 'Escape') {\n    const iframeContainer = $('.plex-enhancements-trailer-iframe-container')\n    iframeContainer?.parentElement?.removeChild(iframeContainer)\n\n    const closeButton = $('.plex-enhancements-close-trailer-button')\n    const playButton = $('.plex-enhancements-play-trailer-button')\n\n    if (closeButton) {\n      closeButton.style.display = 'none'\n    }\n\n    if (playButton) {\n      playButton.style.display = 'block'\n    }\n  }\n})\n\ninsertLinkToCssIfNotExists()\n"],
  "mappings": "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",
  "names": []
}
